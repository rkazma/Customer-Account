{"ast":null,"code":"import { AccountCreate } from '../account-create.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../transaction.service\";\nimport * as i2 from \"../account.service\";\nexport class CustomerAccountComponent {\n  constructor(transactionService, accountService) {\n    this.transactionService = transactionService;\n    this.accountService = accountService;\n    this.customerId = 0; // Initialize these variables as needed\n    this.amount = 0;\n    this.accountId = 0;\n    this.transactions = []; // Declare a variable to hold retrieved transactions\n  }\n  // Methods to interact with the service (as shown in the previous response)\n  // Example:\n  getTransactions() {\n    this.transactionService.getTransactions(this.customerId, this.accountId, 0, 10).subscribe(transactions => {\n      this.transactions = transactions; // Assign retrieved transactions to the variable for display\n    }, error => {\n      // Handle errors here\n    });\n  }\n  createAccount() {\n    const accountCreate = new AccountCreate(this.amount);\n    this.accountService.createAccount(this.customerId, accountCreate).subscribe(response => {\n      this.accountId = response;\n    }, error => {\n      // Handle errors here\n    });\n  }\n  static #_ = this.ɵfac = function CustomerAccountComponent_Factory(t) {\n    return new (t || CustomerAccountComponent)(i0.ɵɵdirectiveInject(i1.TransactionService), i0.ɵɵdirectiveInject(i2.AccountService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CustomerAccountComponent,\n    selectors: [[\"app-customer-account\"]],\n    decls: 8,\n    vars: 3,\n    consts: [[\"placeholder\", \"Customer ID\", 3, \"ngModel\", \"ngModelChange\"], [\"placeholder\", \"Amount\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [3, \"transactions\"]],\n    template: function CustomerAccountComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function CustomerAccountComponent_Template_input_ngModelChange_1_listener($event) {\n          return ctx.customerId = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function CustomerAccountComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.amount = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function CustomerAccountComponent_Template_button_click_3_listener() {\n          return ctx.createAccount();\n        });\n        i0.ɵɵtext(4, \"Create Account\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function CustomerAccountComponent_Template_button_click_5_listener() {\n          return ctx.getTransactions();\n        });\n        i0.ɵɵtext(6, \"Get Transactions\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"app-transactions-table\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.customerId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.amount);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"transactions\", ctx.transactions);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["AccountCreate","CustomerAccountComponent","constructor","transactionService","accountService","customerId","amount","accountId","transactions","getTransactions","subscribe","error","createAccount","accountCreate","response","_","i0","ɵɵdirectiveInject","i1","TransactionService","i2","AccountService","_2","selectors","decls","vars","consts","template","CustomerAccountComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","CustomerAccountComponent_Template_input_ngModelChange_1_listener","$event","ɵɵelementEnd","CustomerAccountComponent_Template_input_ngModelChange_2_listener","CustomerAccountComponent_Template_button_click_3_listener","ɵɵtext","CustomerAccountComponent_Template_button_click_5_listener","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\rayan.kazma\\customer-account-app\\src\\app\\customer-account\\customer-account.component.ts","C:\\Users\\rayan.kazma\\customer-account-app\\src\\app\\customer-account\\customer-account.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { TransactionService } from '../transaction.service';\nimport { AccountService } from '../account.service';\nimport { AccountCreate } from '../account-create.model';\n\n@Component({\n  selector: 'app-customer-account',\n  templateUrl: './customer-account.component.html',\n  styleUrls: ['./customer-account.component.sass'],\n})\nexport class CustomerAccountComponent {\n  customerId: number = 0; // Initialize these variables as needed\n  amount: number = 0;\n  accountId: number = 0;\n  transactions: any[] = []; // Declare a variable to hold retrieved transactions\n\n  constructor(\n    private transactionService: TransactionService,\n    private accountService: AccountService\n  ) {}\n\n  // Methods to interact with the service (as shown in the previous response)\n\n  // Example:\n  getTransactions(): void {\n    this.transactionService\n      .getTransactions(this.customerId, this.accountId, 0, 10)\n      .subscribe(\n        (transactions) => {\n          this.transactions = transactions; // Assign retrieved transactions to the variable for display\n        },\n        (error) => {\n          // Handle errors here\n        }\n      );\n  }\n\n  createAccount(): void {\n    const accountCreate = new AccountCreate(this.amount);\n    this.accountService.createAccount(this.customerId, accountCreate).subscribe(\n      (response) => {\n        this.accountId = response;\n      },\n      (error) => {\n        // Handle errors here\n      }\n    );\n  }\n}\n","<div>\n  <!-- Your input fields for customerId and amount -->\n  <input [(ngModel)]=\"customerId\" placeholder=\"Customer ID\" />\n  <input [(ngModel)]=\"amount\" placeholder=\"Amount\" />\n\n  <!-- Your buttons for account creation and getting transactions -->\n  <button (click)=\"createAccount()\">Create Account</button>\n  <button (click)=\"getTransactions()\">Get Transactions</button>\n\n  <!-- Transaction Table Component -->\n  <app-transactions-table\n    [transactions]=\"transactions\"\n  ></app-transactions-table>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}