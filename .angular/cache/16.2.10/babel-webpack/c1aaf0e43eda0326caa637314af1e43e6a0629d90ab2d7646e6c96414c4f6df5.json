{"ast":null,"code":"import { AccountCreate } from '../account-create.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../transaction.service\";\nimport * as i2 from \"../account.service\";\nimport * as i3 from \"../snackbar.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../transactions-table/transactions-table.component\";\nexport class CustomerAccountComponent {\n  constructor(transactionService, accountService, snackbarService) {\n    this.transactionService = transactionService;\n    this.accountService = accountService;\n    this.snackbarService = snackbarService;\n    this.customerId = 0; // Initialize these variables as needed\n    this.amount = 0;\n    this.accountId = 0;\n    this.transactions = []; // Declare a variable to hold retrieved transactions\n  }\n  // Methods to interact with the service (as shown in the previous response)\n  // Example:\n  getTransactions() {\n    this.transactionService.getTransactions(this.customerId, this.accountId, 0, 10).subscribe(transactions => {\n      this.transactions = transactions; // Assign retrieved transactions to the variable for display\n    }, error => {\n      // Handle errors here\n    });\n  }\n  createAccount() {\n    const accountCreate = new AccountCreate(this.amount);\n    this.accountService.createAccount(this.customerId, accountCreate).subscribe(response => {\n      this.accountId = response;\n      this.snackbarService.openSnackBar('Account Created Successfully');\n    }, error => {\n      // Handle errors here\n      this.snackbarService.openWarningSnackBar('Account already exists');\n    });\n  }\n  static #_ = this.ɵfac = function CustomerAccountComponent_Factory(t) {\n    return new (t || CustomerAccountComponent)(i0.ɵɵdirectiveInject(i1.TransactionService), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i3.SnackbarService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CustomerAccountComponent,\n    selectors: [[\"app-customer-account\"]],\n    decls: 8,\n    vars: 3,\n    consts: [[\"placeholder\", \"Customer ID\", 3, \"ngModel\", \"ngModelChange\"], [\"placeholder\", \"Amount\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [3, \"transactions\"]],\n    template: function CustomerAccountComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function CustomerAccountComponent_Template_input_ngModelChange_1_listener($event) {\n          return ctx.customerId = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function CustomerAccountComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.amount = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function CustomerAccountComponent_Template_button_click_3_listener() {\n          return ctx.createAccount();\n        });\n        i0.ɵɵtext(4, \"Create Account\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function CustomerAccountComponent_Template_button_click_5_listener() {\n          return ctx.getTransactions();\n        });\n        i0.ɵɵtext(6, \"Get Transactions\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"app-transactions-table\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.customerId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.amount);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"transactions\", ctx.transactions);\n      }\n    },\n    dependencies: [i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i5.TransactionsTableComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["AccountCreate","CustomerAccountComponent","constructor","transactionService","accountService","snackbarService","customerId","amount","accountId","transactions","getTransactions","subscribe","error","createAccount","accountCreate","response","openSnackBar","openWarningSnackBar","_","i0","ɵɵdirectiveInject","i1","TransactionService","i2","AccountService","i3","SnackbarService","_2","selectors","decls","vars","consts","template","CustomerAccountComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","CustomerAccountComponent_Template_input_ngModelChange_1_listener","$event","ɵɵelementEnd","CustomerAccountComponent_Template_input_ngModelChange_2_listener","CustomerAccountComponent_Template_button_click_3_listener","ɵɵtext","CustomerAccountComponent_Template_button_click_5_listener","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\rayan.kazma\\customer-account-app\\src\\app\\customer-account\\customer-account.component.ts","C:\\Users\\rayan.kazma\\customer-account-app\\src\\app\\customer-account\\customer-account.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { TransactionService } from '../transaction.service';\nimport { AccountService } from '../account.service';\nimport { AccountCreate } from '../account-create.model';\nimport { SnackbarService } from '../snackbar.service';\n\n@Component({\n  selector: 'app-customer-account',\n  templateUrl: './customer-account.component.html',\n  styleUrls: ['./customer-account.component.sass'],\n})\nexport class CustomerAccountComponent {\n  customerId: number = 0; // Initialize these variables as needed\n  amount: number = 0;\n  accountId: number = 0;\n  transactions: any[] = []; // Declare a variable to hold retrieved transactions\n\n  constructor(\n    private transactionService: TransactionService,\n    private accountService: AccountService,\n    private snackbarService: SnackbarService\n  ) {}\n\n  // Methods to interact with the service (as shown in the previous response)\n\n  // Example:\n  getTransactions(): void {\n    this.transactionService\n      .getTransactions(this.customerId, this.accountId, 0, 10)\n      .subscribe(\n        (transactions) => {\n          this.transactions = transactions; // Assign retrieved transactions to the variable for display\n        },\n        (error) => {\n          // Handle errors here\n        }\n      );\n  }\n\n  createAccount(): void {\n    const accountCreate = new AccountCreate(this.amount);\n    this.accountService.createAccount(this.customerId, accountCreate).subscribe(\n      (response) => {\n        this.accountId = response;\n        this.snackbarService.openSnackBar('Account Created Successfully');\n      },\n      (error) => {\n        // Handle errors here\n        this.snackbarService.openWarningSnackBar('Account already exists');\n      }\n    );\n  }\n}\n","<div>\n  <!-- Your input fields for customerId and amount -->\n  <input [(ngModel)]=\"customerId\" placeholder=\"Customer ID\" />\n  <input [(ngModel)]=\"amount\" placeholder=\"Amount\" />\n\n  <!-- Your buttons for account creation and getting transactions -->\n  <button (click)=\"createAccount()\">Create Account</button>\n  <button (click)=\"getTransactions()\">Get Transactions</button>\n\n  <!-- Transaction Table Component -->\n  <app-transactions-table\n    [transactions]=\"transactions\"\n  ></app-transactions-table>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}