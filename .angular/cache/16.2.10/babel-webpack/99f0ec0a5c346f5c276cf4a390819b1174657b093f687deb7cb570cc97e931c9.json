{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransactionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:7123/api/transactions'; // we can put the base url with out api/accounts in environment.ts to change it based on the env.\n  }\n\n  getTransactions(customerId, accountId, start, limit) {\n    let url = `${this.apiUrl}/customer/${customerId}/account/${accountId}?start=${start}&limit=${limit}`;\n    return this.http.get(url);\n  }\n  static #_ = this.ɵfac = function TransactionService_Factory(t) {\n    return new (t || TransactionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransactionService,\n    factory: TransactionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TransactionService","constructor","http","apiUrl","getTransactions","customerId","accountId","start","limit","url","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\rayan.kazma\\customer-account-app\\src\\app\\transaction.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransactionService {\n  private apiUrl = 'http://localhost:7123/api/transactions'; // we can put the base url with out api/accounts in environment.ts to change it based on the env.\n\n  constructor(private http: HttpClient) {}\n\n  getTransactions(\n    customerId: number,\n    accountId: number,\n    start: number,\n    limit: number\n  ): Observable<any> {\n    let url = `${this.apiUrl}/customer/${customerId}/account/${accountId}?start=${start}&limit=${limit}`;\n    return this.http.get<any>(url);\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,kBAAkB;EAG7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,wCAAwC,CAAC,CAAC;EAEpB;;EAEvCC,eAAeA,CACbC,UAAkB,EAClBC,SAAiB,EACjBC,KAAa,EACbC,KAAa;IAEb,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACN,MAAM,aAAaE,UAAU,YAAYC,SAAS,UAAUC,KAAK,UAAUC,KAAK,EAAE;IACpG,OAAO,IAAI,CAACN,IAAI,CAACQ,GAAG,CAAMD,GAAG,CAAC;EAChC;EAAC,QAAAE,CAAA,G;qBAbUX,kBAAkB,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBhB,kBAAkB;IAAAiB,OAAA,EAAlBjB,kBAAkB,CAAAkB,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}