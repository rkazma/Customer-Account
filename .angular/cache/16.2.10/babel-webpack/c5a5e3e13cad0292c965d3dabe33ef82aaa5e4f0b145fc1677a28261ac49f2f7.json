{"ast":null,"code":"import { AccountCreate } from '../account-create.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../transaction.service\";\nimport * as i2 from \"../account.service\";\nimport * as i3 from \"../snackbar.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../transactions-table/transactions-table.component\";\nexport class CustomerAccountComponent {\n  constructor(transactionService, accountService, snackbarService) {\n    this.transactionService = transactionService;\n    this.accountService = accountService;\n    this.snackbarService = snackbarService;\n    this.customerId = 0; // Initialize these variables as needed\n    this.amount = 0;\n    this.accountId = 0;\n    this.transactions = []; // Declare a variable to hold retrieved transactions\n  }\n  // Methods to interact with the service (as shown in the previous response)\n  // Example:\n  getTransactions() {\n    this.transactionService.getTransactions(this.customerId, this.accountId, 0, 10).subscribe(transactions => {\n      this.transactions = transactions; // Assign retrieved transactions to the variable for display\n    }, error => {\n      // Handle errors here\n    });\n  }\n  createAccount() {\n    const accountCreate = new AccountCreate(this.amount);\n    this.accountService.createAccount(this.customerId, accountCreate).subscribe(response => {\n      if (response.body.status && response.body.status === 'failed') {\n        let accountIdHeader = response.headers.get('Accountid');\n        if (!isNaN(Number(accountIdHeader))) {\n          this.accountId = Number(accountIdHeader);\n        }\n        this.snackbarService.openWarningSnackBar(response.body.message);\n      } else {\n        this.accountId = response.body.accountId;\n        this.snackbarService.openSnackBar('Account Created Successfully');\n      }\n    }, error => {\n      // Handle errors here\n      this.snackbarService.openWarningSnackBar('Unknown Error Occurred');\n    });\n  }\n  static #_ = this.ɵfac = function CustomerAccountComponent_Factory(t) {\n    return new (t || CustomerAccountComponent)(i0.ɵɵdirectiveInject(i1.TransactionService), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i3.SnackbarService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CustomerAccountComponent,\n    selectors: [[\"app-customer-account\"]],\n    decls: 14,\n    vars: 3,\n    consts: [[\"for\", \"customerId\"], [\"id\", \"customerId\", \"placeholder\", \"Customer ID\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"amount\"], [\"id\", \"amount\", \"placeholder\", \"Amount\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [3, \"transactions\"]],\n    template: function CustomerAccountComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"label\", 0);\n        i0.ɵɵtext(2, \"Customer ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function CustomerAccountComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.customerId = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"label\", 2);\n        i0.ɵɵtext(5, \"Amount\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function CustomerAccountComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.amount = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\")(8, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function CustomerAccountComponent_Template_button_click_8_listener() {\n          return ctx.createAccount();\n        });\n        i0.ɵɵtext(9, \"Create Account\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\")(11, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function CustomerAccountComponent_Template_button_click_11_listener() {\n          return ctx.getTransactions();\n        });\n        i0.ɵɵtext(12, \"Get Transactions\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(13, \"app-transactions-table\", 5);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.customerId);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.amount);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"transactions\", ctx.transactions);\n      }\n    },\n    dependencies: [i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i5.TransactionsTableComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["AccountCreate","CustomerAccountComponent","constructor","transactionService","accountService","snackbarService","customerId","amount","accountId","transactions","getTransactions","subscribe","error","createAccount","accountCreate","response","body","status","accountIdHeader","headers","get","isNaN","Number","openWarningSnackBar","message","openSnackBar","_","i0","ɵɵdirectiveInject","i1","TransactionService","i2","AccountService","i3","SnackbarService","_2","selectors","decls","vars","consts","template","CustomerAccountComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","CustomerAccountComponent_Template_input_ngModelChange_3_listener","$event","CustomerAccountComponent_Template_input_ngModelChange_6_listener","CustomerAccountComponent_Template_button_click_8_listener","CustomerAccountComponent_Template_button_click_11_listener","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\rayan.kazma\\customer-account-app\\src\\app\\customer-account\\customer-account.component.ts","C:\\Users\\rayan.kazma\\customer-account-app\\src\\app\\customer-account\\customer-account.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { TransactionService } from '../transaction.service';\nimport { AccountService } from '../account.service';\nimport { AccountCreate } from '../account-create.model';\nimport { SnackbarService } from '../snackbar.service';\nimport { HttpResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-customer-account',\n  templateUrl: './customer-account.component.html',\n  styleUrls: ['./customer-account.component.sass'],\n})\nexport class CustomerAccountComponent {\n  customerId: number = 0; // Initialize these variables as needed\n  amount: number = 0;\n  accountId: number = 0;\n  transactions: any[] = []; // Declare a variable to hold retrieved transactions\n\n  constructor(\n    private transactionService: TransactionService,\n    private accountService: AccountService,\n    private snackbarService: SnackbarService\n  ) {}\n\n  // Methods to interact with the service (as shown in the previous response)\n\n  // Example:\n  getTransactions(): void {\n    this.transactionService\n      .getTransactions(this.customerId, this.accountId, 0, 10)\n      .subscribe(\n        (transactions) => {\n          this.transactions = transactions; // Assign retrieved transactions to the variable for display\n        },\n        (error) => {\n          // Handle errors here\n        }\n      );\n  }\n\n  createAccount(): void {\n    const accountCreate = new AccountCreate(this.amount);\n    this.accountService.createAccount(this.customerId, accountCreate).subscribe(\n      (response: HttpResponse<any>) => {\n        if (response.body.status && response.body.status === 'failed') {\n          let accountIdHeader = response.headers.get('Accountid');\n          if (!isNaN(Number(accountIdHeader))) {\n            this.accountId = Number(accountIdHeader);\n          }\n          this.snackbarService.openWarningSnackBar(response.body.message);\n        } else {\n          this.accountId = response.body.accountId;\n          this.snackbarService.openSnackBar('Account Created Successfully');\n        }\n      },\n      (error) => {\n        // Handle errors here\n        this.snackbarService.openWarningSnackBar('Unknown Error Occurred');\n      }\n    );\n  }\n}\n","<div>\n  <!-- Label and input for Customer ID -->\n  <label for=\"customerId\">Customer ID</label>\n  <input id=\"customerId\" [(ngModel)]=\"customerId\" placeholder=\"Customer ID\" />\n\n  <!-- Label and input for Amount -->\n  <label for=\"amount\">Amount</label>\n  <input id=\"amount\" [(ngModel)]=\"amount\" placeholder=\"Amount\" />\n\n  <!-- Buttons -->\n  <div>\n    <button (click)=\"createAccount()\">Create Account</button>\n  </div>\n  <!-- Button for Get Transactions -->\n  <div>\n    <button (click)=\"getTransactions()\">Get Transactions</button>\n  </div>\n\n  <!-- Transaction Table Component -->\n  <app-transactions-table\n    [transactions]=\"transactions\"\n  ></app-transactions-table>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}